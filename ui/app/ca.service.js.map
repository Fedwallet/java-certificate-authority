{"version":3,"sources":["ca.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;YAWA;gBACE,mBAAqB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;oBAEvB,WAAM,GAAG,6BAA6B,CAAC;gBAFb,CAAC;gBAInC,0BAAM,GAAN;oBACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;yBAChB,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC3C,CAAC;gBAED,yBAAK,GAAL,UAAO,OAAkB;oBACvB,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;oBAClE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;oBACvD,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;oBAEnC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC;yBAChC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC3C,CAAC;gBAEO,+BAAW,GAAnB,UAAoB,GAAa;oBAC/B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;gBAC9B,CAAC;gBAEO,+BAAW,GAAnB,UAAqB,KAAU;oBAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;wBAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;oBAC1E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACtB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAClC,CAAC;gBA/BH;oBAAC,iBAAU,EAAE;;6BAAA;gBAgCb,gBAAC;YAAD,CA/BA,AA+BC,IAAA;YA/BD,iCA+BC,CAAA","file":"ca.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\n\nimport { Observable } from \"rxjs/Observable\";\nimport \"rxjs/add/operator/map\";\nimport \"rxjs/add/operator/catch\";\n\nimport { Authority } from \"./authority\";\nimport { DnBuilder } from \"./dn-builder\";\n\n@Injectable()\nexport class CaService {\n  constructor (private http: Http) {}\n\n  private _caUrl = \"/api/certificateAuthorities\";\n\n  getCas(): Observable<Authority[]> {\n    return this.http.get(this._caUrl)\n                    .map(this.extractData)\n                    .catch(this.handleError);\n  }\n\n  addCa (subject: DnBuilder): Observable<Authority>  {\n    let headers = new Headers({ \"Content-Type\": \"application/json\" });\n    let options = new RequestOptions({ headers: headers });\n    let data = JSON.stringify(subject);\n\n    return this.http.post(this._caUrl, data, options)\n                    .map(this.extractData)\n                    .catch(this.handleError);\n  }\n\n  private extractData(res: Response) {\n    let body = res.json() || [];\n  }\n\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg);\n    return Observable.throw(errMsg);\n  }\n}\n"]}